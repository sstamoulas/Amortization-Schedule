{"version":3,"sources":["App.tsx","index.tsx"],"names":["App","props","fixedAmount","fixedAmountStorage","principle","principleStorage","interestRate","interestRateStorage","years","yearsStorage","currentMortgage","currentMortgageStorage","taxes","taxesStorage","thousandsSeparator","number","toFixed","replace","localStorage","getItem","parseFloat","state","monthlyTaxes","payments","this","startingDate","Date","monthlyInterestRate","mortgage","newInterest","newPrinciple","totalInterest","numberOfPayments","monthlyPayment","newExtraPayment","paymentDate","totalAmount","interest","extra","i","getMonth","setMonth","setFullYear","getFullYear","newTotalAmount","push","getDate","lastPayment","length","newMonth","newDate","newYear","className","htmlFor","type","id","value","onChange","e","parsedYears","isNaN","setState","setItem","toString","updateYears","target","parsedTaxes","updateTaxes","parsedMortgage","updateMortgage","parsedPrinciple","updatePrinciple","step","parsedInterestRate","updateInterestRate","parsedFixedAmount","updateFixedAmount","filter","payment","map","index","key","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b4773872.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.styles.scss';\n\ninterface Payment {\n  paymentDate: Date;\n  totalAmount: number;\n  interest: number;\n  principle: number;\n  extra: number;\n}\n\ntype AppState = {\n  principle: number;\n  interestRate: string;\n  monthlyTaxes: number;\n  years: number;\n  currentMortgage: number;\n  fixedAmount: number;\n}\n\nclass App extends Component<{}, AppState> {\n  constructor(props: any) {\n    super(props);\n\n    let fixedAmount: number;\n    let fixedAmountStorage: string|null;\n    let principle: number;\n    let principleStorage: string|null;\n    let interestRate: string;\n    let interestRateStorage: string|null;\n    let years: number;\n    let yearsStorage: string|null;\n    let currentMortgage: number;\n    let currentMortgageStorage: string|null;\n    let taxes: number;\n    let taxesStorage: string|null;\n\n    fixedAmountStorage = localStorage.getItem('fixedAmount');\n    principleStorage = localStorage.getItem('principle');\n    interestRateStorage = localStorage.getItem('interestRate');\n    yearsStorage = localStorage.getItem('years');\n    currentMortgageStorage = localStorage.getItem('currentMortgage');\n    taxesStorage = localStorage.getItem('taxes');\n\n    if(fixedAmountStorage) {\n      fixedAmount = parseFloat(fixedAmountStorage);\n    }\n    else {\n      fixedAmount = 0;\n    }\n\n    if(principleStorage) {\n      principle = parseFloat(principleStorage);\n    }\n    else {\n      principle = 0;\n    }\n\n    if(interestRateStorage) {\n      interestRate = interestRateStorage;\n    }\n    else {\n      interestRate = '0';\n    }\n\n    if(yearsStorage) {\n      years = parseFloat(yearsStorage);\n    }\n    else {\n      years = 0;\n    }\n\n    if(currentMortgageStorage) {\n      currentMortgage = parseFloat(currentMortgageStorage);\n    }\n    else {\n      currentMortgage = 0;\n    }\n\n    if(taxesStorage) {\n      taxes = parseFloat(taxesStorage);\n    }\n    else {\n      taxes = 0;\n    }\n\n    this.state = {\n      principle: principle, //181,360.95\n      interestRate: interestRate, //.0385\n      monthlyTaxes: taxes, //292.04\n      years: years, //26\n      currentMortgage: currentMortgage, //737.50\n      fixedAmount: fixedAmount,\n    };\n  }\n\n  thousandsSeparator = (number: number): string => {\n    return (number).toFixed(2).replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n  }\n\n  render() {\n    let { principle, interestRate, monthlyTaxes, years, currentMortgage, fixedAmount }: AppState = this.state;\n    let startingDate: Date = new Date();\n\n    const monthlyInterestRate: number = (parseFloat(interestRate) ?? 0) / 12;\n    let mortgage: number = currentMortgage - monthlyTaxes;\n    let newInterest: number = (principle * monthlyInterestRate);\n    let newPrinciple: number = (mortgage - newInterest);\n    let payments: Payment[];\n    let totalInterest: number = newInterest;\n\n    if(years > 0) {\n      let numberOfPayments: number = years * 12;\n      let monthlyPayment: number = principle / numberOfPayments;\n      let newExtraPayment: number = (monthlyPayment - newPrinciple);\n\n      payments = [{\n        paymentDate: startingDate,\n        totalAmount: principle,\n        interest: newInterest,\n        principle: newPrinciple,\n        extra: newExtraPayment < 0 ? 0 : newExtraPayment,\n      }];\n\n      for(let i: number = 0; i < numberOfPayments; i++) {\n        let { paymentDate }: Payment = payments[i];\n\n        if(paymentDate.getMonth() > 12) {\n          paymentDate.setMonth(0);\n          paymentDate.setFullYear(paymentDate.getFullYear() + 1);\n        }\n        else if(i > 0) {\n          paymentDate.setMonth(paymentDate.getMonth() + 1);\n        }\n\n        newInterest = (payments[i].totalAmount * monthlyInterestRate);\n        newPrinciple  = (mortgage - newInterest);\n        newExtraPayment = (monthlyPayment - newPrinciple);\n        let newTotalAmount: number = newExtraPayment < 0 ? \n          (payments[i].totalAmount - newPrinciple)\n        :\n          (payments[i].totalAmount - newPrinciple - newExtraPayment);\n\n        totalInterest += newInterest;\n\n        payments.push({\n          paymentDate: new Date(`${paymentDate.getMonth() + 1}, ${paymentDate.getDate()}, ${paymentDate.getFullYear()}`),\n          totalAmount: newTotalAmount, \n          interest: newInterest,\n          principle: newPrinciple,\n          extra: newExtraPayment < 0 ? 0 : newExtraPayment,\n        });\n      }\n\n      let lastPayment = payments[payments.length - 1].paymentDate;\n      if(lastPayment.getMonth() >= 12) {\n        lastPayment.setMonth(0);\n        lastPayment.setFullYear(lastPayment.getFullYear() + 1);\n      }\n      else {\n        lastPayment.setMonth(lastPayment.getMonth() + 1);\n      }\n\n      payments[payments.length - 1].paymentDate = lastPayment;\n    }\n    else {\n      let newExtraPayment: number = fixedAmount;\n\n      payments = [{\n        paymentDate: startingDate,\n        totalAmount: principle,\n        interest: newInterest,\n        principle: newPrinciple,\n        extra: newExtraPayment < 0 ? 0 : newExtraPayment,\n      }];\n\n      while(payments[payments.length - 1].totalAmount > 0) {\n        let { paymentDate, totalAmount }: Payment = payments[payments.length - 1];\n        let newMonth: number = paymentDate.getMonth();\n        let newDate: number = paymentDate.getDate();\n        let newYear: number = paymentDate.getFullYear();\n\n        if(newMonth >= 11) {\n          newMonth = 0;\n          newYear += 1;\n        }\n        else {\n          newMonth += 1;\n        }\n\n        newInterest = (totalAmount * monthlyInterestRate);\n        newPrinciple  = (mortgage - newInterest);\n        newExtraPayment = fixedAmount;\n        let newTotalAmount: number = newExtraPayment < 0 ? \n          (totalAmount - newPrinciple)\n        :\n          (totalAmount - newPrinciple - newExtraPayment);\n\n        totalInterest += newInterest;\n\n        payments.push({\n          paymentDate: new Date(`${newMonth + 1}, ${newDate}, ${newYear}`),\n          totalAmount: newTotalAmount, \n          interest: newInterest,\n          principle: newPrinciple,\n          extra: newExtraPayment < 0 ? 0 : newExtraPayment,\n        });\n      }\n    }\n\n    const updateYears = (years: string): void => {\n      let parsedYears = isNaN(parseFloat(years)) ? 0 : parseFloat(years);\n      this.setState({\n        years: parsedYears,\n        fixedAmount: 0,\n      })\n\n      localStorage.setItem('years', parsedYears.toString());\n      localStorage.setItem('fixedAmount', (0).toString());\n    }\n\n    const updateTaxes = (taxes: string): void => {\n      let parsedTaxes = isNaN(parseFloat(taxes)) ? 0 : parseFloat(taxes);\n      this.setState({\n        monthlyTaxes: parsedTaxes,\n      })\n\n      localStorage.setItem('taxes', parsedTaxes.toString());\n    }\n\n    const updateMortgage = (mortgage: string): void => {\n      let parsedMortgage = isNaN(parseFloat(mortgage)) ? 0 : parseFloat(mortgage);\n      this.setState({\n        currentMortgage: parsedMortgage,\n      })\n\n      localStorage.setItem('currentMortgage', parsedMortgage.toString());\n    }\n\n    const updateInterestRate = (interestRate: string): void => {\n      let parsedInterestRate = isNaN(parseFloat(interestRate)) ? '' : interestRate;\n      this.setState({\n        interestRate: parsedInterestRate,\n      })\n\n      localStorage.setItem('interestRate', parsedInterestRate.toString());\n    }\n\n    const updatePrinciple = (principle: string): void => {\n      let parsedPrinciple = isNaN(parseFloat(principle)) ? 0 : parseFloat(principle);\n      this.setState({\n        principle: parsedPrinciple,\n      })\n\n      localStorage.setItem('principle', parsedPrinciple.toString());\n    }\n\n    const updateFixedAmount = (extra: string): void => {\n      let parsedFixedAmount = isNaN(parseFloat(extra)) ? 0 : parseFloat(extra);\n      this.setState({\n        fixedAmount: parsedFixedAmount,\n        years: 0,\n      })\n\n      localStorage.setItem('fixedAmount', parsedFixedAmount.toString());\n      localStorage.setItem('years', (0).toString());\n    }\n\n    return (\n      <div className='App'>\n        <div className='container'>\n          <h1 className='text-center my-5'>Amortization Schedule</h1>\n          <div className='table-responsive text-center'>\n            <div className=\"d-flex justify-content-center\">\n              <div className=\"w-50\">\n                <label htmlFor='years' className=\"align-elements\">Years:</label>\n                <input \n                  type='number' \n                  id='years'\n                  value={years <= 0 ? '' : years} \n                  onChange={(e) => updateYears(e.target.value)} \n                />\n              </div>\n              <div className=\"w-50\">\n                <label htmlFor='taxes' className=\"align-elements\">Monthly Taxes:</label>\n                <input \n                  type='number' \n                  id='taxes'\n                  value={monthlyTaxes <= 0 ? '' : monthlyTaxes} \n                  onChange={(e) => updateTaxes(e.target.value)} \n                />\n              </div>\n              <div className=\"w-50\">\n                <label htmlFor='mortgage' className=\"align-elements\">Mortgage:</label>\n                <input\n                  type='number'\n                  id='mortgage'\n                  value={currentMortgage <= 0 ? '' : currentMortgage}\n                  onChange={(e) => updateMortgage(e.target.value)}\n                />\n              </div>\n            </div>\n            <div className=\"d-flex justify-content-center\">\n              <div className=\"w-50\">\n                <label htmlFor='principle' className=\"align-elements\">Loan Amount:</label>\n                <input \n                  type='number' \n                  id='principle'\n                  value={principle <= 0 ? '' : principle} \n                  onChange={(e) => updatePrinciple(e.target.value)} \n                />\n              </div>\n              <div className=\"w-50\">\n                <label htmlFor='interestRate' className=\"align-elements\">Interest Rate:</label>\n                <input \n                  type='number' \n                  id='interestRate'\n                  value={interestRate} \n                  step='0.01'\n                  onChange={(e) => updateInterestRate(e.target.value)} \n                />\n              </div>\n              <div className=\"w-50\">\n                <label htmlFor='extra' className=\"align-elements\">Fixed Monthly Extra:</label>\n                <input \n                  type='number' \n                  id='extra'\n                  value={fixedAmount <= 0 ? '' : fixedAmount}\n                  onChange={(e) => updateFixedAmount(e.target.value)} \n                />\n              </div>\n            </div>\n            <div>Total Interest Paid: ${this.thousandsSeparator(parseFloat((totalInterest).toFixed(2)))}</div>\n            <table className='table table-striped table-hover table-sm mb-0'>\n              <thead>\n                <tr>\n                  <th>Date</th>\n                  <th>Left to Pay</th>\n                  <th>Monthly Interest</th>\n                  <th>Monthly Principle</th>\n                  <th>Monthly Extra</th>\n                </tr>\n              </thead>\n              <tbody>\n                {\n                  payments.filter((payment) => payment.totalAmount >= 0).map((payment, index) => (\n                    <tr key={index}>\n                      <td>{`${payment.paymentDate.getMonth() + 1}/${payment.paymentDate.getDate()}/${payment.paymentDate.getFullYear()}`}</td>\n                      <td>${this.thousandsSeparator(parseFloat((payment.totalAmount).toFixed(2)))}</td>\n                      <td>${this.thousandsSeparator(parseFloat((payment.interest).toFixed(2)))}</td>\n                      <td>${this.thousandsSeparator(parseFloat((payment.principle).toFixed(2)))}</td>\n                      <td>${this.thousandsSeparator(parseFloat((payment.extra).toFixed(2)))}</td>\n                    </tr>\n                  ))\n                }\n              </tbody>\n            </table>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}