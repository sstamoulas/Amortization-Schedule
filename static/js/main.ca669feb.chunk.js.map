{"version":3,"sources":["App.tsx","index.tsx"],"names":["App","props","pastPayments","paymentStorage","startDate","dateStorage","principle","principleStorage","interestRate","interestRateStorage","years","yearsStorage","currentMortgage","currentMortgageStorage","thousandsSeparator","number","toFixed","replace","localStorage","getItem","JSON","parse","Array","apply","map","String","prototype","valueOf","Date","getMonth","getDate","getFullYear","parseFloat","state","startingDate","monthlyTaxes","extraPayments","this","monthlyInterestRate","numberOfPayments","monthlyPayment","monthlyInterest","monthlyPrinciple","Math","pow","payments","prevDate","prevAmount","prevInterest","prevPrinciple","prevExtra","length","i","newAmount","extra","setMonth","setFullYear","push","lastPayment","date","month","year","className","htmlFor","type","id","value","onChange","e","parsedYears","isNaN","setState","setItem","toString","updateYears","target","mortgage","parsedMortgage","updateMortgage","parsedPrinciple","updatePrinciple","step","parsedInterestRate","updateInterestRate","updateDate","filter","payment","index","key","newPayments","stringify","updateExtra","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ca669feb.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.styles.scss';\n\ninterface Payment {\n  prevDate: Date;\n  prevAmount: number;\n  prevInterest: number;\n  prevPrinciple: number;\n  prevExtra: any;\n}\n\ntype AppState = {\n  startingDate: Date;\n  principle: number;\n  interestRate: string;\n  monthlyTaxes: number;\n  years: number;\n  currentMortgage: number;\n  extraPayments: string[];\n}\n\nclass App extends Component<{}, AppState> {\n  constructor(props: any) {\n    super(props);\n\n    let pastPayments: string[];\n    let paymentStorage: string|null;\n    let startDate: Date;\n    let dateStorage: string|null;\n    let principle: number;\n    let principleStorage: string|null;\n    let interestRate: string;\n    let interestRateStorage: string|null;\n    let years: number;\n    let yearsStorage: string|null;\n    let currentMortgage: number;\n    let currentMortgageStorage: string|null;\n\n    paymentStorage = localStorage.getItem('payments');\n    dateStorage = localStorage.getItem('startingDate');\n    principleStorage = localStorage.getItem('principle');\n    interestRateStorage = localStorage.getItem('interestRate');\n    yearsStorage = localStorage.getItem('years');\n    currentMortgageStorage = localStorage.getItem('currentMortgage');\n\n    if(paymentStorage) {\n      pastPayments = JSON.parse(paymentStorage);\n    }\n    else {\n      pastPayments = Array.apply(null, new Array(360)).map(String.prototype.valueOf, '0');\n    }\n\n    if(dateStorage) {\n      startDate = new Date(dateStorage);\n    }\n    else {\n      startDate = new Date(`${(new Date()).getMonth()}, ${(new Date()).getDate()}, ${(new Date()).getFullYear()}`);\n    }\n\n    if(principleStorage) {\n      principle = parseFloat(principleStorage);\n    }\n    else {\n      principle = 0;\n    }\n\n    if(interestRateStorage) {\n      interestRate = interestRateStorage;\n    }\n    else {\n      interestRate = '0';\n    }\n\n    if(yearsStorage) {\n      years = parseFloat(yearsStorage);\n    }\n    else {\n      years = 0;\n    }\n\n    if(currentMortgageStorage) {\n      currentMortgage = parseFloat(currentMortgageStorage);\n    }\n    else {\n      currentMortgage = 0;\n    }\n\n    this.state = {\n      startingDate: startDate,\n      principle: principle, //181,360.95\n      interestRate: interestRate,\n      monthlyTaxes: 292.04,\n      years: years, //26\n      currentMortgage: currentMortgage,\n      extraPayments: pastPayments,\n    };\n  }\n\n  thousandsSeparator = (number: number): string => {\n    return (number).toFixed(2).replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n  }\n\n  render() {\n    let { startingDate, principle, interestRate, monthlyTaxes, years, currentMortgage, extraPayments }: AppState = this.state;\n\n    const monthlyInterestRate: number = (parseFloat(interestRate) ?? 0) / 12;\n    let numberOfPayments: number = 0;\n    let monthlyPayment: number = 0;\n    let monthlyInterest: number = 0;\n    let monthlyPrinciple: number = 0;\n\n    if(currentMortgage === 0) {\n      numberOfPayments = years * 12;\n      monthlyPayment = (principle * (monthlyInterestRate * Math.pow(1 + monthlyInterestRate, numberOfPayments)) / (Math.pow(1 + monthlyInterestRate, numberOfPayments) - 1));\n      monthlyInterest = principle * monthlyInterestRate;\n      monthlyPrinciple = monthlyPayment - monthlyInterest;\n    }\n    else {\n      numberOfPayments = 30 * 12;\n      monthlyPayment = currentMortgage;\n      monthlyInterest = principle * monthlyInterestRate;\n      monthlyPrinciple = currentMortgage - monthlyInterest;\n    }\n    \n    let payments: Payment[] = [{\n      prevDate: startingDate,\n      prevAmount: principle,\n      prevInterest: monthlyInterest,\n      prevPrinciple: monthlyPrinciple,\n      prevExtra: extraPayments[0].length ? extraPayments[0] : 0,\n    }];\n\n    let i: number = 0;\n    let newAmount: number = payments[i].prevAmount - payments[i].prevPrinciple;\n    if((currentMortgage > 0 && currentMortgage > 800) || years > 0) {\n      while(newAmount > 0 && i < numberOfPayments) {\n        let { prevDate, prevAmount, prevInterest, prevPrinciple, prevExtra }: Payment = payments[i];\n        newAmount = prevAmount - prevPrinciple;\n        let extra;\n\n        if(prevExtra.length) {\n          newAmount -= parseFloat(prevExtra);\n        }\n\n        if(extraPayments[i] && extraPayments[i].length) {\n          extra = extraPayments[i];\n        }\n        else {\n          extra = 0;\n        }\n\n        if(prevDate.getMonth() >= 12) {\n          prevDate.setMonth(0);\n          prevDate.setFullYear(prevDate.getFullYear() + 1);\n        }\n        else if(i > 0) {\n          prevDate.setMonth(prevDate.getMonth() + 1);\n        }\n\n        payments.push({\n          prevDate: new Date(`${prevDate.getMonth() + 1}, ${prevDate.getDate()}, ${prevDate.getFullYear()}`),\n          prevAmount: newAmount, \n          prevInterest: ((newAmount * monthlyInterestRate)),\n          prevPrinciple: ((monthlyPayment - (newAmount * monthlyInterestRate))),\n          prevExtra: extra,\n        });\n\n        i++;\n      }\n    }\n\n    let lastPayment = payments[payments.length - 1].prevDate;\n    if(lastPayment.getMonth() >= 12) {\n      lastPayment.setMonth(0);\n      lastPayment.setFullYear(lastPayment.getFullYear() + 1);\n    }\n    else {\n      lastPayment.setMonth(lastPayment.getMonth() + 1);\n    }\n\n    payments[payments.length - 1].prevDate = lastPayment;\n\n    const updateYears = (years: string): void => {\n      let parsedYears = isNaN(parseFloat(years)) ? 0 : parseFloat(years);\n      this.setState({\n        years: parsedYears,\n      })\n\n      localStorage.setItem('years', parsedYears.toString());\n    }\n\n    const updateMortgage = (mortgage: string): void => {\n      let parsedMortgage = isNaN(parseFloat(mortgage)) ? 0 : parseFloat(mortgage);\n      this.setState({\n        currentMortgage: parsedMortgage,\n      })\n\n      localStorage.setItem('currentMortgage', parsedMortgage.toString());\n    }\n\n    const updateInterestRate = (interestRate: string): void => {\n      let parsedInterestRate = isNaN(parseFloat(interestRate)) ? '' : interestRate;\n      this.setState({\n        interestRate: parsedInterestRate,\n      })\n\n      localStorage.setItem('interestRate', parsedInterestRate.toString());\n    }\n\n    const updatePrinciple = (principle: string): void => {\n      let parsedPrinciple = isNaN(parseFloat(principle)) ? 0 : parseFloat(principle);\n      this.setState({\n        principle: parsedPrinciple,\n      })\n\n      localStorage.setItem('principle', parsedPrinciple.toString());\n    }\n\n    const updateDate = (date: string): void => {\n      this.setState({\n        startingDate: new Date(date),\n      })\n\n      localStorage.setItem('startingDate', date);\n    }\n\n    const updateExtra = (extra: string, i: number): void => {\n      let newPayments = extraPayments.map((payment, index) => {\n        if(i === index) {\n          return extra;\n        }\n\n        return payment;\n      });\n\n      this.setState({\n        extraPayments: newPayments\n      });\n\n      localStorage.setItem('payments', JSON.stringify(newPayments));\n    }\n\n    let date = startingDate.getDate();\n    let month = startingDate.getMonth();\n    let year = startingDate.getFullYear();\n\n    return (\n      <div className='App'>\n        <div className='container'>\n          <h1 className='text-center my-5'>Amortization Schedule</h1>\n          <div className='table-responsive text-center'>\n            <div className=\"d-flex justify-content-center\">\n            {\n              (years > 0 || currentMortgage === 0) &&\n              <div className=\"w-50 d-flex justify-content-center\">\n                <label htmlFor='years' className=\"align-elements\">Years:</label>\n                <input \n                  type='number' \n                  id='years'\n                  value={years <= 0 ? '' : years} \n                  onChange={(e) => updateYears(e.target.value)} \n                />\n              </div>\n            }\n            {\n              currentMortgage === 0 && years === 0 &&\n              <div className=\"w-50 d-flex justify-content-center\">\n                <label>-------------------- OR --------------------</label>\n              </div>\n            }\n            {\n              (currentMortgage > 0 || years === 0) &&\n              <div className=\"w-50 d-flex justify-content-center\">\n                <label htmlFor='mortgage' className=\"align-elements\">Mortgage:</label>\n                <input\n                  type='number'\n                  id='mortgage'\n                  value={currentMortgage <= 0 ? '' : currentMortgage}\n                  onChange={(e) => updateMortgage(e.target.value)}\n                />\n              </div>\n            }\n            </div>\n            <div className=\"d-flex justify-content-center\">\n              <div className=\"w-50\">\n                <label htmlFor='principle' className=\"align-elements\">Remaining Loan Amount:</label>\n                <input \n                  type='number' \n                  id='principle'\n                  value={principle <= 0 ? '' : principle} \n                  onChange={(e) => updatePrinciple(e.target.value)} \n                />\n              </div>\n              <div className=\"w-50\">\n                <label htmlFor='interestRate' className=\"align-elements\">Interest Rate:</label>\n                <input \n                  type='number' \n                  id='interestRate'\n                  value={interestRate} \n                  step='0.01'\n                  onChange={(e) => updateInterestRate(e.target.value)} \n                />\n              </div>\n              <div className=\"w-50\">\n                <label htmlFor='startingDate' className=\"align-elements\">Starting Date:</label>\n                <input \n                  type='date' \n                  id='startingDate'\n                  value={`${year}-${(month + 1) < 10 ? `0${month + 1}` : month + 1}-${date < 10 ? `0${date}` : date}`} \n                  onChange={(e) => updateDate(e.target.value)} \n                />\n              </div>\n            </div>\n            <table className='table table-striped table-hover table-sm mb-0'>\n              <thead>\n                <tr>\n                  <th>Date</th>\n                  <th>Left to Pay</th>\n                  <th>Monthly Interest</th>\n                  <th>Monthly Principle</th>\n                  <th>Monthly Extra</th>\n                </tr>\n              </thead>\n              <tbody>\n                {\n                  payments.filter((payment) => payment.prevAmount >= 0).map((payment, index) => (\n                    <tr key={index}>\n                      <td>{`${payment.prevDate.getMonth()}/${payment.prevDate.getDate()}/${payment.prevDate.getFullYear()}`}</td>\n                      <td>${this.thousandsSeparator(parseFloat((payment.prevAmount).toFixed(2)))}</td>\n                      <td>${this.thousandsSeparator(parseFloat((payment.prevInterest).toFixed(2)))}</td>\n                      <td>${this.thousandsSeparator(parseFloat((payment.prevPrinciple).toFixed(2)))}</td>\n                      <td><input type='string' value={extraPayments[index]} onChange={(e) => updateExtra(e.target.value, index)} /></td>\n                    </tr>\n                  ))\n                }\n              </tbody>\n            </table>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}