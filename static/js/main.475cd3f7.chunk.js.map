{"version":3,"sources":["App.tsx","index.tsx"],"names":["App","props","pastPayments","paymentStorage","startDate","dateStorage","principle","principleStorage","interestRate","interestRateStorage","years","yearsStorage","thousandsSeparator","number","toFixed","replace","localStorage","getItem","JSON","parse","Array","apply","map","String","prototype","valueOf","Date","getMonth","getDate","getFullYear","parseFloat","state","startingDate","monthlyTaxes","extraPayments","this","monthlyInterestRate","numberOfPayments","monthlyPayment","Math","pow","monthlyInterest","payments","prevDate","prevAmount","prevInterest","prevPrinciple","prevExtra","length","i","newAmount","extra","setMonth","setFullYear","push","lastPayment","date","month","year","className","htmlFor","type","id","value","onChange","e","parsedYears","isNaN","setState","setItem","toString","updateYears","target","step","parsedInterestRate","updateInterestRate","parsedPrinciple","updatePrinciple","updateDate","filter","payment","index","key","newPayments","stringify","updateExtra","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.475cd3f7.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.styles.scss';\n\ninterface Payment {\n  prevDate: Date;\n  prevAmount: number;\n  prevInterest: number;\n  prevPrinciple: number;\n  prevExtra: any;\n}\n\ntype AppState = {\n  startingDate: Date;\n  principle: number;\n  interestRate: string;\n  monthlyTaxes: number;\n  years: number;\n  extraPayments: string[];\n}\n\nclass App extends Component<{}, AppState> {\n  constructor(props: any) {\n    super(props);\n\n    let pastPayments: string[];\n    let paymentStorage: string|null;\n    let startDate: Date;\n    let dateStorage: string|null;\n    let principle: number;\n    let principleStorage: string|null;\n    let interestRate: string;\n    let interestRateStorage: string|null;\n    let years: number;\n    let yearsStorage: string|null;\n\n    paymentStorage = localStorage.getItem('payments');\n    dateStorage = localStorage.getItem('startingDate');\n    principleStorage = localStorage.getItem('principle');\n    interestRateStorage = localStorage.getItem('interestRate');\n    yearsStorage = localStorage.getItem('years');\n\n    if(paymentStorage) {\n      pastPayments = JSON.parse(paymentStorage);\n    }\n    else {\n      pastPayments = Array.apply(null, new Array(360)).map(String.prototype.valueOf, '0');\n    }\n\n    if(dateStorage) {\n      startDate = new Date(dateStorage);\n    }\n    else {\n      startDate = new Date(`${(new Date()).getMonth() + 1}, ${(new Date()).getDate()}, ${(new Date()).getFullYear()}`);\n    }\n\n    if(principleStorage) {\n      principle = parseFloat(principleStorage);\n    }\n    else {\n      principle = 0;\n    }\n\n    if(interestRateStorage) {\n      interestRate = interestRateStorage;\n    }\n    else {\n      interestRate = '0';\n    }\n\n    if(yearsStorage) {\n      years = parseFloat(yearsStorage);\n    }\n    else {\n      years = 0;\n    }\n\n    this.state = {\n      startingDate: startDate,\n      principle: principle,\n      interestRate: interestRate,\n      monthlyTaxes: 292.04,\n      years: years,\n      extraPayments: pastPayments,\n    };\n  }\n\n  thousandsSeparator = (number: number): string => {\n\n    return (number).toFixed(2).replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n  }\n\n  render() {\n    let { startingDate, principle, interestRate, monthlyTaxes, years, extraPayments }: AppState = this.state;\n\n    const monthlyInterestRate: number = (parseFloat(interestRate) ?? 0) / 12;\n\n    const numberOfPayments: number = years * 12;\n    const monthlyPayment: number = (principle * (monthlyInterestRate * Math.pow(1 + monthlyInterestRate, numberOfPayments)) / (Math.pow(1 + monthlyInterestRate, numberOfPayments) - 1));\n    const monthlyInterest: number = principle * monthlyInterestRate;\n    const monthlyPrinciple: number = monthlyPayment - monthlyInterest;\n    \n    let payments: Payment[] = [{\n      prevDate: startingDate,\n      prevAmount: principle,\n      prevInterest: monthlyInterest,\n      prevPrinciple: monthlyPrinciple,\n      prevExtra: extraPayments[0].length ? extraPayments[0] : 0,\n    }];\n\n    for(let i: number = 1; i < numberOfPayments; i++) {\n      let { prevDate, prevAmount, prevInterest, prevPrinciple, prevExtra }: Payment = payments[i - 1];\n      let newAmount: number = prevAmount - prevPrinciple;\n      let extra;\n\n      if(prevExtra.length) {\n        newAmount -= parseFloat(prevExtra);\n      }\n\n      if(extraPayments[i].length) {\n        extra = extraPayments[i];\n      }\n      else {\n        extra = 0;\n      }\n\n      if(prevDate.getMonth() >= 12) {\n        prevDate.setMonth(0);\n        prevDate.setFullYear(prevDate.getFullYear() + 1);\n      }\n      else {\n        prevDate.setMonth(prevDate.getMonth() + 1);\n      }\n\n      payments.push({\n        prevDate: new Date(`${prevDate.getMonth() + 1}, ${prevDate.getDate()}, ${prevDate.getFullYear()}`),\n        prevAmount: newAmount, \n        prevInterest: ((newAmount * monthlyInterestRate)),\n        prevPrinciple: ((monthlyPayment - (newAmount * monthlyInterestRate))),\n        prevExtra: extra,\n      });\n    }\n\n    let lastPayment = payments[payments.length - 1].prevDate;\n    if(lastPayment.getMonth() >= 12) {\n      lastPayment.setMonth(0);\n      lastPayment.setFullYear(lastPayment.getFullYear() + 1);\n    }\n    else {\n      lastPayment.setMonth(lastPayment.getMonth() + 1);\n    }\n\n    payments[payments.length - 1].prevDate = lastPayment;\n\n    const updateYears = (years: string): void => {\n      let parsedYears = isNaN(parseFloat(years)) ? 0 : parseFloat(years);\n      this.setState({\n        years: parsedYears,\n      })\n\n      localStorage.setItem('years', parsedYears.toString());\n    }\n\n    const updateInterestRate = (interestRate: string): void => {\n      let parsedInterestRate = isNaN(parseFloat(interestRate)) ? '' : interestRate;\n      this.setState({\n        interestRate: parsedInterestRate,\n      })\n\n      localStorage.setItem('interestRate', parsedInterestRate.toString());\n    }\n\n    const updatePrinciple = (principle: string): void => {\n      let parsedPrinciple = isNaN(parseFloat(principle)) ? 0 : parseFloat(principle);\n      this.setState({\n        principle: parsedPrinciple,\n      })\n\n      localStorage.setItem('principle', parsedPrinciple.toString());\n    }\n\n    const updateDate = (date: string): void => {\n      this.setState({\n        startingDate: new Date(date),\n      })\n\n      localStorage.setItem('startingDate', date);\n    }\n\n    const updateExtra = (extra: string, i: number): void => {\n\n      let newPayments = extraPayments.map((payment, index) => {\n        if(i === index) {\n          return extra;\n        }\n\n        return payment;\n      });\n\n      this.setState({\n        extraPayments: newPayments\n      });\n\n      localStorage.setItem('payments', JSON.stringify(newPayments));\n    }\n\n    let date = startingDate.getDate();\n    let month = startingDate.getMonth() + 1;\n    let year = startingDate.getFullYear();\n\n    return (\n      <div className='App'>\n        <div className='container'>\n          <h1 className='text-center my-5'>Amortization Schedule</h1>\n          <div className='table-responsive text-center'>\n            <div className=\"d-flex justify-content-center\">\n              <div className=\"w-50\">\n                <label htmlFor='years' className=\"align-elements\">Years:</label>\n                <input \n                  type='number' \n                  id='years'\n                  value={years <= 0 ? '' : years} \n                  onChange={(e) => updateYears(e.target.value)} \n                />\n              </div>\n              <div className=\"w-50\">\n                <label htmlFor='interestRate' className=\"align-elements\">Interest Rate:</label>\n                <input \n                  type='number' \n                  id='interestRate'\n                  value={interestRate} \n                  step='0.01'\n                  onChange={(e) => updateInterestRate(e.target.value)} \n                />\n              </div>\n            </div>\n            <div className=\"d-flex justify-content-center\">\n              <div className=\"w-50\">\n                <label htmlFor='principle' className=\"align-elements\">Principle:</label>\n                <input \n                  type='number' \n                  id='principle'\n                  value={principle <= 0 ? '' : principle} \n                  onChange={(e) => updatePrinciple(e.target.value)} \n                />\n              </div>\n              <div className=\"w-50\">\n                <label htmlFor='startingDate' className=\"align-elements\">Starting Date:</label>\n                <input \n                  type='date' \n                  id='startingDate'\n                  value={`${year}-${month < 10 ? `0${month}` : month}-${date < 10 ? `0${date}` : date}`} \n                  onChange={(e) => updateDate(e.target.value)} \n                />\n              </div>\n            </div>\n            <table className='table table-striped table-hover table-sm mb-0'>\n              <thead>\n                <tr>\n                  <th>Date</th>\n                  <th>Left to Pay</th>\n                  <th>Monthly Interest</th>\n                  <th>Monthly Principle</th>\n                  <th>Monthly Extra</th>\n                </tr>\n              </thead>\n              <tbody>\n                {\n                  payments.filter((payment) => payment.prevAmount >= 0).map((payment, index) => (\n                    <tr key={index}>\n                      <td>{`${payment.prevDate.getMonth() + 1}/${payment.prevDate.getDate()}/${payment.prevDate.getFullYear()}`}</td>\n                      <td>${this.thousandsSeparator(parseFloat((payment.prevAmount).toFixed(2)))}</td>\n                      <td>${this.thousandsSeparator(parseFloat((payment.prevInterest).toFixed(2)))}</td>\n                      <td>${this.thousandsSeparator(parseFloat((payment.prevPrinciple).toFixed(2)))}</td>\n                      <td><input type='string' value={extraPayments[index]} onChange={(e) => updateExtra(e.target.value, index)} /></td>\n                    </tr>\n                  ))\n                }\n              </tbody>\n            </table>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}